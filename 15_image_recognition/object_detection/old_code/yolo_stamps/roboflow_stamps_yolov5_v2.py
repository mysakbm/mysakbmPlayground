# -*- coding: utf-8 -*-
"""Roboflow-Stamps-YOLOv5_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qo_MUAnzOu2q-blp7OPnG1VfpYTT1r5s

#Install Dependencies

_(Remember to choose GPU in Runtime if not already selected. Runtime --> Change Runtime Type --> Hardware accelerator --> GPU)_
"""

import os
import numpy as np
import glob
import re

import pickle
import random
from tqdm import tqdm
import cv2
import pprint
from pathlib import Path
from PIL import Image
import PIL.ImageOps
from datetime import datetime

# clone YOLOv5 repository
!git clone https://github.com/ultralytics/yolov5  # clone repo

from google.colab import drive
drive.mount('/content/gdrive')

!cp -a gdrive/MyDrive/Data\ Science\ Utils/. .

! pip install kaggle

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets download rtatman/stamp-verification-staver-dataset

! unzip stamp-verification-staver-dataset.zip

SCANS_DIR = "scans/scans/"
TRUTH_MASKS_DIR = "ground-truth-maps/ground-truth-maps/"
TRUTH_PIXELS_DIR = "ground-truth-pixel/ground-truth-pixel/"

exces_scans = list(sorted(os.listdir(os.path.join("", SCANS_DIR))))

del_files = [SCANS_DIR + s for s in exces_scans if re.search(r'(.*?4[0-9][0-9].*?)', s)]
del_files = del_files[1:]
a = [os.remove(file) for file in del_files]

imgs = list(sorted(os.listdir(os.path.join("", SCANS_DIR))))
masks = list(sorted(os.listdir(os.path.join("", "ground-truth-maps/ground-truth-maps/"))))
pixel_mask = list(sorted(os.listdir(os.path.join("", "ground-truth-pixel/ground-truth-pixel"))))


for idx in range(len(imgs)):
    img_path = os.path.join("", SCANS_DIR, imgs[idx])
    mask_path = os.path.join("", "ground-truth-maps/ground-truth-maps/", masks[idx])
    pixel_mask_path = os.path.join("", "ground-truth-pixel/ground-truth-pixel", pixel_mask[idx])
    
    img = Image.open(img_path).convert("RGB")
    # note that we haven't converted the mask to RGB,
    # because each color corresponds to a different instance
    # with 0 being background
    mask = Image.open(mask_path)

    mask = np.array(mask)
    obj_ids = np.unique(mask)
    obj_ids = obj_ids[1:]
    num_objs = len(obj_ids)

    list_to_delete = ["037", "217", "219", "224", "387", "392", "400",
                      "398", "396", "394", "393", "384", "382", "381", "379", 
                      "376", "374", "373", "370", "367", "355", "333", "324", 
                      "320", "237", "236", "235", "234", "233", "232", "229", 
                      "228", "227", "226", "225", "224", "223", "222", "221", 
                      "220", "216", "215", "214", "213", "138", "053", "038"]

    
    if (
        num_objs == 0 or
        any([re.search(r'(.*?00' + file_name + '.*?)', img_path)
            for file_name in list_to_delete])):
        os.remove(img_path)
        os.remove(mask_path)
        os.remove(pixel_mask_path)

def augment_data(img, mask,
                 crop_max_size=50,
                 max_rotation_angle=5,
                 random_flip=True):
    img_sizes = img.size
    # Zoom: 0 % Minimum Zoom, 10 % Maximum Zoom
    random_x = random.randint(0, crop_max_size)
    random_y = random.randint(0, crop_max_size)

    random_x_2 = random.randint(0, crop_max_size)
    random_y_2 = random.randint(0, crop_max_size)

    img_out = img. \
        crop([random_x, random_y,
              img_sizes[0] - random_x_2, img_sizes[1] - random_y_2]). \
        resize(img_sizes)

    mask_out = mask. \
        crop([random_x, random_y,
              img_sizes[0] - random_x_2, img_sizes[1] - random_y_2]). \
        resize(img_sizes, PIL.Image.NEAREST)

    # Rotation: Between - 5° and +5°
    rot_angle = random.uniform(-max_rotation_angle, max_rotation_angle)
    img_out = img_out.rotate(rot_angle)
    mask_out = mask_out.rotate(rot_angle)

    # Flip
    if random_flip and bool(random.getrandbits(1)):
        img_out = img_out.transpose(method=Image.FLIP_LEFT_RIGHT)
        mask_out = mask_out.transpose(method=Image.FLIP_LEFT_RIGHT)

    return (img_out, mask_out)

def create_dataset(indices, dataset_type, 
                   path_to_dataset,
                   max_augmentations=7):
    imgs = list(sorted(os.listdir(os.path.join(path_to_dataset, "scans/scans"))))
    pixel_mask = list(sorted(os.listdir(os.path.join(path_to_dataset, "ground-truth-pixel/ground-truth-pixel"))))

    images_path = Path(f"{path_to_dataset}/yolov5/Staver/{dataset_type}/images")
    images_path.mkdir(parents=True, exist_ok=True)

    labels_path = Path(f"{path_to_dataset}/yolov5/Staver/{dataset_type}/labels")
    labels_path.mkdir(parents=True, exist_ok=True)
    
    for idx in tqdm(indices):
        category_idx = 0
        img_path = os.path.join(path_to_dataset, "scans/scans", imgs[idx])
        pixel_mask_path = os.path.join(path_to_dataset, "ground-truth-pixel/ground-truth-pixel", pixel_mask[idx])

        img = Image.open(img_path).convert("RGB")
        mask = Image.open(pixel_mask_path).convert("L")
        mask = Image.fromarray(255 - np.array(mask))

        for jdx in range(max_augmentations + 1):
            if jdx > 0:
                img_out, mask_out = augment_data(img, mask,
                                                 crop_max_size=10,
                                                 max_rotation_angle=5,
                                                 random_flip=True)
            else:
                img_out, mask_out = img, mask

            image_name = f"{idx}_{jdx}.jpeg"
            label_name = f"{idx}_{jdx}.txt"

            img_out.save(str(images_path / image_name), "JPEG")

            img_sizes = img_out.size
            pos = np.where(mask_out)

            if pos[0].size > 0:
                xmin = np.min(pos[1]) / img_sizes[0]
                xmax = np.max(pos[1]) / img_sizes[0]
                ymin = np.min(pos[0]) / img_sizes[1]
                ymax = np.max(pos[0]) / img_sizes[1]

                bbox_width = xmax - xmin
                bbox_height = ymax - ymin
                with (labels_path / label_name).open(mode="w") as label_file:
                    label_file.write(
                        f"{category_idx} {xmin + bbox_width / 2} {ymin + bbox_height / 2} {bbox_width} {bbox_height}\n"
                    )
            else:
                with (labels_path / label_name).open(mode="a") as label_file:
                    pass

path_to_dataset = "./"

pwd

imgs = list(sorted(os.listdir(os.path.join(path_to_dataset, "scans/scans"))))
indices = list(range(len(imgs)))
random.shuffle(indices)

create_dataset(indices[:-50], 'train', path_to_dataset)

create_dataset(indices[-50:], 'val', path_to_dataset)

pwd

# Commented out IPython magic to ensure Python compatibility.
# # clone YOLOv5 repository
# !git clone https://github.com/ultralytics/yolov5  # clone repo
# %cd yolov5
# !git reset --hard 886f1c03d839575afecb059accf74296fad395b6

# install dependencies as necessary
!pip install -qr requirements.txt  # install dependencies (ignore errors)
import torch
import os

from IPython.display import Image, clear_output  # to display images
from utils.downloads import gdrive_download  # to download models/datasets

# clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

# # this is the YAML file Roboflow wrote for us that we're loading into this notebook with our data
# %cat ./Staver/data.yaml

"""# Define Model Configuration and Architecture

We will write a yaml script that defines the parameters for our model like the number of classes, anchors, and each layer.

You do not need to edit these cells, but you may.
"""

# # define number of classes based on YAML
# import yaml
# with open("./Staver/" + "/data.yaml", 'r') as stream:
#   num_classes = str(yaml.safe_load(stream)['nc'])

# num_classes

num_classes = 1

# Commented out IPython magic to ensure Python compatibility.
#this is the model configuration we will use for our tutorial 
# %cat /content/yolov5/models/yolov5l.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate /content/yolov5/Staver/data.yaml
# names:
# - Stamp
# nc: 1
# train: Staver/train/images
# val: Staver/val/images
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate /content/yolov5/models/custom_yolov5x.yaml
# 
# # parameters
# nc: {num_classes}  # number of classes
# depth_multiple: 1.0  # model depth multiple
# width_multiple: 1.0  # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, BottleneckCSP, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, BottleneckCSP, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, BottleneckCSP, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, BottleneckCSP, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, BottleneckCSP, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

# Commented out IPython magic to ensure Python compatibility.
#this is the model configuration we will use for our tutorial 
# %cat /content/yolov5/models/custom_yolov5x.yaml

"""# Train Custom YOLOv5 Detector

### Next, we'll fire off training!


Here, we are able to pass a number of arguments:
- **img:** define input image size
- **batch:** determine batch size
- **epochs:** define the number of training epochs. (Note: often, 3000+ are common here!)
- **data:** set the path to our yaml file
- **cfg:** specify our model configuration
- **weights:** specify a custom path to weights. (Note: you can download weights from the Ultralytics Google Drive [folder](https://drive.google.com/open?id=1Drs_Aiu7xx6S-ix95f9kNsA6ueKRpN2J))
- **name:** result names
- **nosave:** only save the final checkpoint
- **cache:** cache images for faster training
"""

import yolov5.train
yolov5.train.run(data="/content/yolov5/Staver/data.yaml",
                 imgsz=1280,
                 batch_size = 5,
                 epochs = 60,
                 weights='yolov5l.pt',
                 cfg='./models/custom_yolov5x.yaml',
                 name = "stamps_yolov5x_results")

# # train yolov5s on custom data for 100 epochs
# # time its performance
# %%time
# %cd /content/yolov5/
# !python train.py --img 1200 --batch 16 --epochs 150 --data /content/yolov5/Staver-2/data.yaml --cfg ./models/custom_yolov5s.yaml --weights yolov5s --name stamps_yolov5s_results  --cache

timestamp = datetime.now().strftime("%Y_%m_%d_%H_%M_%S")

folder_to_save = "../gdrive/MyDrive/saved_models/yolo/custom_yolov5x/" + timestamp + "/"

if not os.path.isdir(folder_to_save):
  os.makedirs(folder_to_save)

!cp -a runs/ $folder_to_save

# !cp -a ../gdrive/MyDrive/saved_models/yolo/custom_yolov5x/runs ./

"""# Evaluate Custom YOLOv5 Detector Performance

Training losses and performance metrics are saved to Tensorboard and also to a logfile defined above with the **--name** flag when we train. In our case, we named this `yolov5s_results`. (If given no name, it defaults to `results.txt`.) The results file is plotted as a png after training completes.

Note from Glenn: Partially completed `results.txt` files can be plotted with `from utils.utils import plot_results; plot_results()`.
"""

# Commented out IPython magic to ensure Python compatibility.
 # Start tensorboard
# Launch after you have started training
# logs save in the folder "runs"
# %load_ext tensorboard
# %tensorboard --logdir runs

# we can also output some older school graphs if the tensor board isn't working for whatever reason... 
from utils.plots import plot_results  # plot results.txt as results.png
Image(filename='/content/yolov5/runs/train/stamps_yolov5x_results/results.png', width=1000)  # view results.png

"""### Curious? Visualize Our Training Data with Labels

After training starts, view `train*.jpg` images to see training images, labels and augmentation effects.

Note a mosaic dataloader is used for training (shown below), a new dataloading concept developed by Glenn Jocher and first featured in [YOLOv4](https://arxiv.org/abs/2004.10934).
"""

# # first, display our ground truth data
# print("GROUND TRUTH TRAINING DATA:")
# Image(filename='/content/yolov5/runs/train/stamps_yolov5x_results/test_batch0_labels.jpg', width=1600)

# # first, display our ground truth data
# print("PRED DATA:")
# Image(filename='/content/yolov5/runs/train/stamps_yolov5x_results/test_batch0_pred.jpg', width=1600)

# print out an augmented training example
print("GROUND TRUTH AUGMENTED TRAINING DATA:")
Image(filename='/content/yolov5/runs/train/stamps_yolov5x_results/train_batch0.jpg', width=1600)

"""#Run Inference  With Trained Weights
Run inference with a pretrained checkpoint on contents of `test/images` folder downloaded from Roboflow.
"""

# Commented out IPython magic to ensure Python compatibility.
# trained weights are saved by default in our weights folder
# %ls runs/

# Commented out IPython magic to ensure Python compatibility.
# %ls runs/train/stamps_yolov5x_results/weights

# Commented out IPython magic to ensure Python compatibility.
# when we ran this, we saw .007 second inference time. That is 140 FPS on a TESLA P100!
# use the best weights!
# %cd /content/yolov5/
!python detect.py --weights runs/train/stamps_yolov5x_results/weights/best.pt --img 1200 --conf 0.4 --source ./Staver/val/images

#display inference on ALL test images
#this looks much better with longer training above

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/yolov5/runs/detect/exp/*.jpeg'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")

"""# Export Trained Weights for Future Inference

Now that you have trained your custom detector, you can export the trained weights you have made here for inference on your device elsewhere
"""

# from google.colab import drive
# drive.mount('/content/gdrive')

# %cp /content/yolov5/runs/train/yolov5s_results/weights/best.pt /content/gdrive/My\ Drive

"""## Congrats!

Hope you enjoyed this!

--Team [Roboflow](https://roboflow.ai)
"""